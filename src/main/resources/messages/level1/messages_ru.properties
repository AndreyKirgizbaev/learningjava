#part1
levels.level1.part1=Basic literals
levels.level1.part1.literals=Literals
levels.level1.part1.literals.about1=Regardless of its complexity, a program always performs operations on numbers,\
  strings, and other values. These values are called literals. There are many different sorts of literals in Java, \
  but in this topic we will focus only on a few of them: the ones that surround us all the time in everyday life.
levels.level1.part1.literals.about2=Let's consider integer numbers, strings, and characters \
  in the format in which they are written in Java.
levels.level1.part1.integer=Integer numbers
levels.level1.part1.integer.about1=These numbers are used to count things in the real world. Also, \
  we will often use them in Java.
levels.level1.part1.integer.about2=Here are several examples of valid integer number literals separated by commas: \
  <code>0, 1, 2, 10, 11, 100.</code>
levels.level1.part1.integer.about3=If an integer value contains a lot of digits, we can add underscores to \
  divide the digit into blocks for increased readability: <code>1_000_000</code>. It's more readable than the same value \
  written as <code>1000000</code>.
levels.level1.part1.сharacters=Characters
levels.level1.part1.сharacters.about1=A single character can represent a digit, a letter or another symbol. \
  To write a character we use single quotes as follows: <code>'A', 'B', 'C', 'x', 'y', 'z', '0', '1', '2', '9'</code>. \
  Character literals can represent symbols of an alphabet, digits from <code>'0'</code> to <code>'9'</code>, \
  whitespaces (' '), or other characters or symbols (<code>'$'</code>).
levels.level1.part1.сharacters.about2=Do not confuse characters that represent numbers (e.g. <code>'9'</code>), \
  with numbers themselves (e.g. <code>9</code>).
levels.level1.part1.сharacters.about3=A character can't include two and more digits or \
  letters because it represents only a single symbol. \
  The following two examples are incorrect: <code>'abc', '543'</code>. These literals contain too many characters.
levels.level1.part1.strings=Strings
levels.level1.part1.strings.about1=A string is a sequence of any individual characters. \
  Strings represent text information such as a text of advertising, an address of a web page or a login on a site.
levels.level1.part1.strings.about2=To write a string we use double quotes instead of single ones. \
  Here are some valid examples: <code>"text", "I want to know Java", "123456", "mail@gmail.com"</code>. \
  A string consisting of a single character like "A" is also a valid string,\
  but do not confuse it with the <code>'A'</code> character.
levels.level1.part1.strings.about3=As you can see, strings can include letters, digits, \
  whitespaces, and other characters.
levels.level1.part1.remember=Remember
levels.level1.part1.remember.about1=Do not confuse these literals:
levels.level1.part1.remember.about2=<code>123</code> is an integer number, <code>"123"</code> is a string
levels.level1.part1.remember.about3=<code>'A'</code> is a character, <code>"A"</code> is a string
levels.level1.part1.remember.about4=<code>'1'</code> is a character, <code>1</code> is an integer number
#part2
levels.level1.part2=Printing data
levels.level1.part2.output=<b>The output:</b>
levels.level1.part2.print=Displaying text using println() and print()
levels.level1.part2.print.about1=<b>Standard output</b> is a receiver to which a program can send information (text). \
  It is supported by all common operating systems. \
  Java provides a special object <code>System.out</code> to work with the standard output. \
  We will often use it to print something.
levels.level1.part2.print.about2=The <code>println</code>  method displays the passed string followed \
  by a new line on the screen. As an example, the following code fragment prints two lines.
levels.level1.part2.print.about3=System.out.println("Hello"); <br/> \
  System.out.println("World");
levels.level1.part2.print.about4=Hello <br/> World
levels.level1.part2.print.about5=The method allows you to print the empty line when no string is given:
levels.level1.part2.print.about6=System.out.println("Java is a popular programming language.");<br/>\
System.out.println(); // prints empty line<br/>\
System.out.println("It is used all over the world!");
levels.level1.part2.print.about7=The <code>print</code> method displays the passed value and places the cursor \
  (the position where we display a value) after it. As an example, the code below outputs all strings in a single line.
levels.level1.part2.print.about8=System.out.print("I ");/n \
System.out.print("know ");<br/> \
System.out.print("Java ");<br/> \n\
System.out.print("well.");
levels.level1.part2.print.about9=I know Java well.
levels.level1.part2.printNumbers=Printing numbers and characters
levels.level1.part2.printNumbers.about1=Both methods <code>println</code> and <code>print</code> allow a program \
  to print not only strings and characters, but also numbers.
levels.level1.part2.printNumbers.about2=System.out.print(108);   // printing a number<br/>\
  System.out.print('c');   // printing a character that represents a letter<br/>\
  System.out.print("Q");   // printing a string<br/>\
  System.out.println('3'); // printing a character that represents a digit<br/>\
  <br/>\
  System.out.print(22);<br/>\
  System.out.print('E');<br/>\
  System.out.print(8);<br/>\
  System.out.println('1');
levels.level1.part2.printNumbers.about3=108cQ3<br/>\
  22E81

