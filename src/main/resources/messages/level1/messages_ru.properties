#part1
levels.level1.part1=Основные литералы
levels.level1.part1.literals=Литералы
levels.level1.part1.literals.about1=Независимо от сложности, программа всегда выполняет операции над числами, \
  строки и другие значения. Эти значения называются литералами. В Java есть много разных литералов, \
  но в этой теме мы остановимся только на некоторых из них: тех, которые окружают нас все время в повседневной жизни.
levels.level1.part1.literals.about2=Давайте рассмотрим целые числа, строки и символы \
  в формате, в котором они написаны на Java.
levels.level1.part1.integer=Целые числа
levels.level1.part1.integer.about1=Эти числа используются для подсчета вещей в реальном мире. Также, \
  мы будем часто использовать их в Java.
levels.level1.part1.integer.about2=Вот несколько примеров допустимых литералов целых чисел, разделенных запятыми:\
  <code>0, 1, 2, 10, 11, 100.</code>
levels.level1.part1.integer.about3=Если целое число содержит много цифр, мы можем добавить подчеркивания для\
  разделиния числа на блоки для повышения читабельности: <code>1_000_000</code>. Это более читабельно, чем то же значение \
  записанное как <code>1000000</code>.
levels.level1.part1.сharacters=Символы
levels.level1.part1.сharacters.about1=Один символ может представлять собой цифру, букву или другой символ. \
  Чтобы написать символ, мы используем одинарные кавычки следующим образом: <code>'A', 'B', 'C', 'x', 'y', 'z', '0', '1', '2', '9'</code>. \
  Символьные литералы могут представлять символы алфавита, цифры от <code>'0'</code> до <code>'9'</code>, \
  пробелы (' '), или другие символы или символы (<code>'$'</code>).
levels.level1.part1.сharacters.about2=Не путайте символы, которые представляют цифры (например, <code>'9'</code>), \
  с целыми числами (например, <code>9</code>).
levels.level1.part1.сharacters.about3=Символ не может содержать две и более цифр или \
  буквы, потому что он представляет только один символ. \
  Следующие два примера неверны: <code>'abc', '543'</code>. Эти литералы содержат более одного символа.
levels.level1.part1.strings=Строки
levels.level1.part1.strings.about1=Строка - это последовательность любых отдельных символов. \
  Строки представляют собой текстовую информацию, такую как текст рекламы, адрес веб-страницы или логин на сайте.
levels.level1.part1.strings.about2=Чтобы написать строку, мы используем двойные кавычки вместо одинарных. \
  Вот несколько допустимых примеров: <code>"text", "I want to know Java", "123456", "mail@gmail.com"</code>. \
  Строка, состоящая из одного символа, такого как «A», также является допустимой строкой, \
  но не путайте ее с символом <code>'A'</code> character.
levels.level1.part1.strings.about3=Как видите, строки могут содержать буквы, цифры, \
  пробелы и другие символы.
levels.level1.part1.remember=Помните
levels.level1.part1.remember.about1=Не путайте эти литералы:
levels.level1.part1.remember.about2=<code>123</code> является целым числом, <code>"123"</code> является строкой
levels.level1.part1.remember.about3=<code>'A'</code> является символом, <code>"A"</code> является строкой
levels.level1.part1.remember.about4=<code>'1'</code> является символом, <code>1</code> является целым числом
levels.level1.part1.task=Введите число «23», символ «$» и строку - «I love Java» в формате, \
  в котором они написаны на Java.
levels.level1.part1.task.error1=Вы не ввели число «23».
levels.level1.part1.task.error2=Вы не ввели символ «$».
levels.level1.part1.task.error3=Вы не ввели строку «I love Java».
#part2
levels.level1.part2=Печать данных
levels.level1.part2.output=<b>Вывод:</b>
levels.level1.part2.printShort=println() и print()
levels.level1.part2.print=Отображение текста с использованием println() и print()
levels.level1.part2.print.about1=<b>Стандартный вывод</b> это приемник, на который программа может отправлять информацию (текст). \
  Поддерживается всеми распространенными операционными системами. \
  Java предоставляет специальный объект <code>System.out</code> для работы со стандартным выводом. \
  Мы будем часто использовать это, чтобы напечатать что-то.
levels.level1.part2.print.about2=Метод <code>println</code> отображает переданную строку, \
  за которой следует новая строка на экране. В качестве примера следующий фрагмент кода печатает две строки.
levels.level1.part2.print.about3=System.out.println("Hello");\n\
  System.out.println("World");
levels.level1.part2.print.about4=Hello \n\
  World
levels.level1.part2.print.about5=Метод позволяет напечатать пустую строку, если строка не указана:
levels.level1.part2.print.about6=System.out.println("Java is a popular programming language.");\n\
System.out.println(); // напечатает пустую строку\n\
System.out.println("It is used all over the world!");
levels.level1.part2.print.about7=Метод <code>print</code> отображает переданное значение и устанавливает курсор \
  (позиция, где мы отображаем значение) после него. В качестве примера приведенный ниже код выводит все строки в одну строку.
levels.level1.part2.print.about8=System.out.print("I ");\n\
  System.out.print("know ");\n\
  System.out.print("Java ");\n\
  System.out.print("well.");
levels.level1.part2.print.about9=I know Java well.
levels.level1.part2.printNumbers=Печать цифр и символов
levels.level1.part2.printNumbers.about1=Оба метода <code>println</code> и <code>print</code> позволяют программе \
  печатать не только строки и символы, но и цифры.
levels.level1.part2.printNumbers.about2=System.out.print(108);   // напечатает число\n\
  System.out.print('c');   // напечатает символ, продставляющий букву\n\
  System.out.print("Q");   // напечатает строку\n\
  System.out.println('3'); // напечатает символ, продставляющий число\n\
  \n\
  System.out.print(22);\n\
  System.out.print('E');\n\
  System.out.print(8);\n\
  System.out.println('1');
levels.level1.part2.printNumbers.about3=108cQ3\n\
  22E81
levels.level1.part2.task=Используя 3 раза метод <b>println</b> вывести на экран:
levels.level1.part2.about=I know 2 methods for text output:\n\
  println\n\
  print
levels.level1.part2.task.error1=На экран не выводится «I know 2 methods for text output:».
levels.level1.part2.task.error2=На экран не выводится «println».
levels.level1.part2.task.error3=На экран не выводится «print».
#part3
levels.level1.part3=public static void main
levels.level1.part3.about=На этом уроке мы создадим нашу самую первую программу на Java. \
  Наша программа просто напечатает "Hello, World!" на экране \
  (традиция большинства программистов при изучении новых языков). \
  Наш код на первый взгляд может показаться не слишком интересным, \
  однако мы узнаем об основном шаблоне, которому должны следовать все программы Java.
levels.level1.part3.helloWorldShort=Первые слова
levels.level1.part3.helloWorld=Первые слова программы
levels.level1.part3.helloWorld.about1=Вот Java код этой программы:
levels.level1.part3.helloWorld.about2=public class Main {\n\
    \tpublic static void main(String[] args) {\n\
        \t\tSystem.out.println("Hello, World!");\n\
    \t}\n\
  }
levels.level1.part3.helloWorld.about3=Hello, World!
levels.level1.part3.terminologyShort=Терминология
levels.level1.part3.terminology=Основная терминология
levels.level1.part3.terminology.about1=Теперь, когда вы увидели результат, \
  давайте изучим некоторую базовую терминологию, а затем попытаемся понять эту программу.
levels.level1.part3.terminology.about2=<b>Программа</b> – оследовательность инструкций (называемых операторами), \
  которые выполняются один за другим в предсказуемой манере. \
  Последовательный поток это самая распространенная и простая последовательность операторов, \
  в которой операторы выполняются в том порядке, в котором они написаны - сверху вниз в последовательном порядке;
levels.level1.part3.terminology.about3=<b>Оператор</b> – одно действие (например, печать текста)\
  завершается точкой с запятой (<code>;</code>);
levels.level1.part3.terminology.about4=<b>Блок</b> – группа, состоящая из нуля, одного или нескольких вложенных операторов  \
  парой скобок <code>{...}</code>; В программе выше два таких блока.
levels.level1.part3.terminology.about5=<b>Метод</b> – последовательность утверждений \
  представляющая операцию высокого уровня (также известную как подпрограмма или процедура).
levels.level1.part3.terminology.about6=<b>Синтаксис</b> – набор правил, которые определяют, как \
  программа должна быть написана, чтобы быть действительной; \
  У Java есть свой специфический синтаксис, который мы будем изучать;
levels.level1.part3.terminology.about7=<b>Ключевое слово</b> – слово, которое имеет особое значение в языке программирования \
  (<code>public</code>, <code>class</code>, и многие другие). \
  Эти слова не могут использоваться как имена переменных для вашей собственной программы;
levels.level1.part3.terminology.about8=<b>Идентификатор или имя</b> – слово, которое относится к чему-то \
  в программе (такой как переменная или имя функции);
levels.level1.part3.terminology.about9=<b>Комментарий</b> – текстовое объяснение того, что делает код. \
  Комментарии Java начинаются с <code>//</code>.
levels.level1.part3.underMicroscopeShort=Под микроскопом
levels.level1.part3.underMicroscope=Программа Hello World под микроскопом
levels.level1.part3.underMicroscope.about1=Программа Hello World иллюстрирует основные элементы Java-программ. \
  Пока мы обсудим только самые важные элементы.
levels.level1.part3.underMicroscope.about2=1. <b>public class</b>. Это основная единица программы. \
  Каждая Java-программа должна иметь хотя бы один класс. \
  Определение класса состоит из ключевого слова <code>class</code> за которым следует имя класса. \
  Класс может иметь любое имя, например <code>App</code>, <code>Main</code>, или <code>Program</code>, \
  но оно не должно начинаться с цифры. Набор фигурных скобок <code>{...}</code> заключает тело класса.
levels.level1.part3.underMicroscope.about3=public class Main {\n\
    \t// ...\n\
  }
levels.level1.part3.underMicroscope.about4=Текст после <code>//</code> является просто комментарием, \
  не часть программы. Подробнее о комментариях мы узнаем в следующих темах.
levels.level1.part3.underMicroscope.about5=2. <b>main метод</b>. Чтобы программа работала, \
  мы помещаем метод с именем main внутри класса. Это точка входа для программы Java. \
  Снова фигурные скобки <b>{...}</b> заключают тело метода, которое содержит программные операторы.
levels.level1.part3.underMicroscope.about6=public static void main(String[] args) {\n\
    \t// действия записываются здесь\n\
  }
levels.level1.part3.underMicroscope.about7=Ключевые слова  <code>public</code>, <code>static</code>, и <code>void</code> \
  будут обсуждаться позже, так что просто запомните их сейчас. \
  Имя этого метода (<code>main</code>) предопределено и всегда должно быть одинаковым. \
  Важность регистров; если вы называете свой первый метод как <b>Main</b>, <b>MAIN</b> \
  или что-то еще, программа не запустится.
levels.level1.part3.underMicroscope.about8=Элемент <code>String[]</code> представляет последовательность \
  аргументов, передаваемых программе из внешнего мира. Не беспокойтесь о них прямо сейчас.
levels.level1.part3.underMicroscope.about9=3. <b>Печать "Hello, world!"</b>. \
  Тело метода состоит из программных операторов, которые определяют, что программа должна делать после запуска. \
  Наша программа печатает строку <b>"Hello, World!"</b> используя следующую инструкцию:
levels.level1.part3.underMicroscope.about10=System.out.println("Hello, World!"); //  каждое действие должно заканчиваться ;
levels.level1.part3.underMicroscope.about11=Это одна из самых важных вещей, которую нужно понять из программы \
  <b>Hello World</b>. Мы вызываем специальный метод println для отображения строки, \
  за которой следует новая строка на экране. Мы будем часто использовать этот подход, \
  чтобы напечатать что-нибудь интересное для экрана. Текст печатается без двойных кавычек.
levels.level1.part3.underMicroscope.about12=Важно то, что "Hello, World!" не является ключевым словом или идентификатором; \
   это просто текст для печати.
levels.level1.part3.keywords=Ключевые слова
levels.level1.part3.keywords.about1=Как видите, даже простая Java-программа состоит из множества элементов, \
  в том числе ключевые слова, которые являются частями языка. Всего  \
  Java предоставляет более 50 ключевых слов, которые вы постепенно изучите в этом курсе.
levels.level1.part3.keywords.about2=Обратите внимание, что <code>main</code> не ключевое слово.
levels.level1.part3.conclusion=Вывод
levels.level1.part3.conclusion.about1=Мы обсудили простейшую программу, которую вы можете написать на Java. \
  У нее есть один класс с одним методом <code>main</code>. \
  У каждой Java-программы должен быть метод <code>main</code>, поскольку он запускается первым при запуске программы. \
  Не беспокойтесь о запоминании каждого термина, используемого в уроке (синтаксис, оператор, блок). \
  Эти термины появятся в следующих уроках.  \
  Не забудьте использовать предоставленную программу <b>Hello World</b> в качестве шаблона для своих собственных программ.
levels.level1.part3.task=Теперь вы не просто пишите методы - вы пишите программу, которая компилируется!<br/>\
  Используя приобритенные навыки напишите программу, которая выведет:
levels.level1.part3.task.about=Writing programs is very interesting!
#part4
levels.level1.part4=Типы и переменные
levels.level1.part4.declaring=Объявление и инициализация
levels.level1.part4.declaring.about1=<b>Переменная</b> храненит значение определенного <b>типа</b>:\
  строка, число или что-то еще. Каждая переменная имеет <b>имя</b> \
  (также известный как <b>идентификатор</b>), чтобы отличать его от других. \
  Прежде чем начать использовать переменную, вы должны объявить ее.
levels.level1.part4.declaring.about2=Общая форма декларации следующая:
levels.level1.part4.declaring.about3=DataType variableName = initialization;
levels.level1.part4.declaring.about4=Левая часть этого утверждения описывает переменную, \
  а правая часть описывает то, что должно присвоиться этой переменной.
levels.level1.part4.declaring.about5=<b>Тип</b> (млм <b>тип данных </b>) \
  переменной определяет, какие возможные операции могут быть выполнены с переменной \
  и какие значения могут быть сохранены в нем. Здесь мы используем несуществующий тип данных (<b>DataType</b>) \
  чтобы продемонстрировать общую форму объявления.
levels.level1.part4.declaring.about6=<b>Имя</b> (или <b>идентификато</b>) отличает переменную от других. \
  Имя переменной не может начинаться с цифры; обычно начинается с буквы. \
  Всегда старайтесь выбирать значимые и читаемые имена для переменных, чтобы сделать ваш код легким для понимания.
levels.level1.part4.declaring.about7=<b>Оператор присваивания</b> обозначен как <code>=</code> \
  используется для присвоения единственного значения или результата выражения переменной.
levels.level1.part4.declaring.about8=<b>Инициализация</b> это значение или результат выражения, \
  назначенного переменной.
levels.level1.part4.declaring.about9=Согласно этой декларации, мы можем объявить переменную \
  типа <code>String</code> и присвоить ей слово <b>"java"</b>:
levels.level1.part4.declaring.about10=String language = "java";
levels.level1.part4.declaring.about11=Мы также можем объявить переменную типа <code>int</code> \
  для хранения целого числа:
levels.level1.part4.declaring.about12=int numberOfApples = 5;
levels.level1.part4.declaring.about13=Регистр в имени переменной имеет значение: <code>language</code> \
  отличается от <code>Language</code>.
levels.level1.part4.declaring.about14=Переменные могут хранить не только строки и числа, \
  но также символы и другие типы данных, о которых мы узнаем позже на этом уровне.
levels.level1.part4.value=Доступ к значению переменной
levels.level1.part4.value.about1=Как только переменная была объявлена,  \
  ее значение может быть доступно и изменено с использованием имени. \
  В приведенном ниже примере мы объявляем переменную, а затем печатаем ее:
levels.level1.part4.value.about2=String dayOfWeek = "Monday";\n\
  System.out.println(dayOfWeek); // Monday
levels.level1.part4.value.about3=Также возможно присвоить значение одной переменной другой:
levels.level1.part4.value.about4=int one = 1;\n\
  int num = one;\n\
  System.out.println(num); // 1
levels.level1.part4.value.about5=Важной особенностью переменных является то, что они могут быть изменены. Вам не нужно \
  снова объявлять переменную, чтобы изменить ее значение; просто присвойте ей новое значение, используя оператор <code>=</code>.
levels.level1.part4.value.about6=Давайте объявим переменную с именем <code>dayOfWeek</code> \
  и напечатаем ее значение до и после изменения:
levels.level1.part4.value.about7=String dayOfWeek = "Monday";\n\
  System.out.println(dayOfWeek); // Monday\n\
  \n\
  dayOfWeek = "Tuesday";\n\
  System.out.println(dayOfWeek); // Tuesday
levels.level1.part4.value.about8=Есть одно ограничение для переменных: вы можете назначить назначить значение только того же типа, \
  что и тип исходной переменной. Итак, следующий код неверен:
levels.level1.part4.value.about9=int number = 10;\n\
  number = 11; // присвоить новое число\n\
  number = "twelve"; // это не заработает
levels.level1.part4.alternative=Альтернативные формы декларации
levels.level1.part4.alternative.about1=Есть несколько альтернативных форм декларации, которые \
  реже используется на практике. Вот несколько из них на конкретных примерах.
levels.level1.part4.alternative.about2=Объявление и инициализация нескольких переменных одного типа:
levels.level1.part4.alternative.about3=String language = "java", version = "8 or newer";
levels.level1.part4.alternative.about4=Разделение объявления и инициализации переменной:
levels.level1.part4.alternative.about5=int age;\n\
  age = 35;
levels.level1.part4.alternative.about6=Однако, как мы уже отмечали, эти формы используются редко.
levels.level1.part4.inference=Тип вывода
levels.level1.part4.inference.about1=Начиная с Java 11, вы можете \
  написать <code>var</code> вместо определенного типа для принудительного определения типа на основе типа присвоенного значения:
levels.level1.part4.inference.about2=var variableName = initialization;
levels.level1.part4.inference.about3=Вот два примера ниже:
levels.level1.part4.inference.about4=var language = "Java"; // String\n\
  var version = 11; // int
levels.level1.part4.inference.about5=Мы не будем использовать вывод типов в нашей теории, \
  так что наш курс подходит для людей, которые используют более ранние версии Java. Но если вы хотите практиковать это, \
  вы можете использовать вывод типов в наших упражнениях, так как они полностью поддерживают Java 11.
levels.level1.part4.task=Объявите переменную <b>programLanguage</b> и присвойте ей значение "<b>Java</b>" и выведете ее \
  на экран. Объявите переменную <b>apples</b> и присвойте ей значение <b>5</b> и выведете ее \
  на экран. Пример вывода:
levels.level1.part4.task.about=Java\n\
  5
levels.level1.part4.task.error1=Вы не объявили переменную programLanguage
levels.level1.part4.task.error2=Вы не присвоили значение "Java" переменной programLanguage
levels.level1.part4.task.error3=Вы не объявили переменную apples
levels.level1.part4.task.error4=Вы не присвоили значение 5 переменной apples
#part5
levels.level1.part5=Комментарии
levels.level1.part5.about1=Внутри Java-программы вы можете написать специальный текст, \
  который будет игнорироваться Java-компилятором - известный как  <b>комментарий</b>. \
  Комментарии позволяют исключить код из процесса компиляции (отключить его) \
  или уточнить кусок кода для себя или других разработчиков. \
  В наших материалах мы используем комментарии в теории и практические занятия, чтобы объяснить, как и почему работает наш код.
levels.level1.part5.about2=Язык программирования Java поддерживает три вида комментариев.
levels.level1.part5.endOfLine=Комментарии в конце строки
levels.level1.part5.endOfLine.about1=Компилятор Java игнорирует любой текст от  <code>//</code> до конца строки.
levels.level1.part5.endOfLine.about2=class Program {\n\
    \tpublic static void main(String[] args) {\n\
        \t\t// The line below will be ignored\n\
        \t\t// System.out.println("Hello, World");\n\
        \t\t// It prints the string "Hello, Java"\n\
        \t\tSystem.out.println("Hello, Java"); // Here can be any comment\n\
    \t}\n\
  }
levels.level1.part5.endOfLine.about3=В приведенном выше примере текст после <code>//</code> игнорируется компилятором.
levels.level1.part5.multiLine=Многострочные комментарии
levels.level1.part5.multiLine.about1=Компилятор игнорирует любой текст с \
  <code>/*</code> и до <code>*/</code>. Может использоваться как многострочный и однострочный комментарий.
levels.level1.part5.multiLine.about2=class Program {\n\
    \tpublic static void main(String[] args) {\n\
        \t\t/* This is a single-line comment */\n\
        \t\t/*  This is an example of\n\
        \t\ta multi-line comment */\n\
    \t}\n\
  }
levels.level1.part5.multiLine.about3=Вы можете использовать комментарии внутри других комментариев:
levels.level1.part5.multiLine.about4=class Program {\n\
    \tpublic static void main(String[] args) {\n\
        \t\t/*\n\
        \t\tSystem.out.println("Hello"); // print "Hello"\n\
        \t\tSystem.out.println("Java");  // print "Java"\n\
        \t\t*/\n\
    \t}\n\
  }
levels.level1.part5.multiLine.about5=Часть кода выше игнорируется компилятором из-за \
  <code>/* ... */</code> комментария.
levels.level1.part5.documentationComments=Комментарии к документации Java
levels.level1.part5.documentationComments.about1=Компилятор игнорирует любой текст с <code>/**</code> \
  до <code>*/</code> так же, как игнорирует многострочные комментарии.
levels.level1.part5.documentationComments.about2=Эти виды комментариев можно использовать \
  для автоматического создания документации о вашем исходном коде с помощью инструмента <b>javadoc</b>. \
  Обычно эти комментарии размещаются над объявлениями классов, интерфейсов, методов и так далее. \
  Некоторые специальные метки, такие как <code>@param</code> или <code>@return</code>, \
  часто используются для дополнительной информации. \
  Тем не менее, они не являются обязательными, и мы не будем иметь дело с ними сейчас.
levels.level1.part5.documentationComments.about3=Смотрите пример ниже.
levels.level1.part5.documentationComments.about4=class Program {\n\
    \t/**\n\
    \t* The main method accepts an array of string arguments\n\
    \t*\n\
    \t* @param args from the command line\n\
    \t*/\n\
    \tpublic static void main(String[] args) {\n\
        \t\t// do nothing\n\
    \t}\n\
  }
levels.level1.part5.task=Вы должны закомментировать или раскомментировать некоторые строки кода, чтобы программа вывела:
levels.level1.part5.task.about=Hello World!\n\
  I love Java!
levels.level1.part5.task.error=Вы должны исправлять только комментарии!
#part6
levels.level1.part6=Арифметические операторы
levels.level1.part6.arithmetic=Арифметические операторы, приоритет операций
levels.level1.part6.arithmetic.about1=System.out.println(4*7); // умножение\n\
  System.out.println(28/7); // деление\n\
  \n\
  System.out.println(7/4);\n\
  // Так как делимое и делитель — целые числа, частное также будет целым.\n\
  // Его дробная часть отбрасывается.\n\
  System.out.println(7%4);\n\
  // результатом вывода будет остаток от деления 7 на 4.
levels.level1.part6.arithmetic.about2=28\n\
  4\n\
  1\n\
  3
levels.level1.part6.arithmetic.about3=Как и в математике, у операций умножения, деления и вычисления остатка от \
  деления приоритет выше, чем у операций сложения и вычитания. Изменить приоритет операций можно с помощью скобок.
levels.level1.part6.arithmetic.about4=System.out.println(2+2*2);\n\
  // результатом вычисления будет 6\n\
  \n\
  System.out.println((2+2)*2);\n\
  // результатом вычисления будет 8
levels.level1.part6.abbreviated=Сокращённые операторы
levels.level1.part6.abbreviated.about1=Математические операции можно записывать в сокращённом виде:
levels.level1.part6.abbreviated.about2=Обычная запись
levels.level1.part6.abbreviated.about3=z = z + 5;\n\
  z = z - 5;\n\
  z = z * 5;\n\
  z = z / 5;\n\
  z = z % 5;
levels.level1.part6.abbreviated.about4=Сокращённая запись
levels.level1.part6.abbreviated.about5=z += 5;\n\
  z -= 5;\n\
  z *= 5;\n\
  z /= 5;\n\
  z %= 5;
levels.level1.part6.abbreviated.about6=Сокращённой записью пользуются, когда нужно произвести действие \
  над значением переменной и записать результат в эту же переменную. Это более лаконичный способ записи.
levels.level1.part6.abbreviated.about7=Инкремент — оператор увеличения числа на единицу, \
  декремент — уменьшения на единицу.
levels.level1.part6.abbreviated.about8=<code>z++</code>, <code>++z</code> — инкременты, \
  <code>z--</code>, <code>--z</code> — декременты.
levels.level1.part6.abbreviated.about9=int x = 42;\n\
  System.out.println(x);\n\
  System.out.println(x++);\n\
  System.out.println(x++);\n\
  \n\
  x = 42;\n\
  System.out.println(x);\n\
  System.out.println(++x);\n\
  System.out.println(++x);
levels.level1.part6.abbreviated.about10=42\n\
  42\n\
  43\n\
  42\n\
  43\n\
  44
levels.level1.part6.abbreviated.about11=В первом случае после изменения переменной возвращается её предыдущее значение,\
   до изменения, т. н. постинкремент, а во втором случае — её новое значение, после изменения, т. н. преинкремент.
levels.level1.part6.abbreviated.about12=Аналогично, <code>k--</code> — постдекремент, <code>--k</code> — предекремент.
levels.level1.part6.task=Переменная <b>а</b> равна 5. Прибавьте к ней 11, потом разделите на 4, и выведите результат.
levels.level1.part6.task.error1=Вы не должны менять инициализацию!
levels.level1.part6.task.error2=Вы должны прибавить к переменной а 11!
levels.level1.part6.task.error3=Вы должны разделить переменную а на 4!
#part7
levels.level1.part7=Числа с плавающей точкой. Тип double
levels.level1.part7.about1=Для проведения операций с дробными числами обычно используется тип double:
levels.level1.part7.about2=double t = 36.6;\n\
System.out.println(t + 0.2); // 36.8
levels.level1.part7.about3=При делении целых чисел дробная часть отбрасывается. \
  Чтобы этого не происходило, нужно записать делимое или делитель как <code>double</code>, а не <code>int</code>.\
   Это можно сделать, представив число как десятичную дробь (например, 7.0) или с буквой d на конце (например, 7d):
levels.level1.part7.about4=System.out.println(7/4);\n\
  // целые числа по умолчанию int.\n\
  // Поэтому в результате деления отбросится дробная часть и выведется 1\n\
  \n\
  System.out.println(7.0/4);\n\
  // представляем 7 как десятичную дробь, выводится результат 1.75\n\
  \n\
  System.out.println(7d/4);\n\
  // представляем 7 как число типа double, результат — 1.75\n\
  \n\
  System.out.println(7/4d);\n\
  // представляем 4 как число типа double, результат — 1.75
levels.level1.part7.about5=Если в арифметическом выражении попадаются данные разных типов, \
  они приводятся к тому, у которого больший диапазон значений, то есть в выражении 7.0 / 4, \
  где данные имеют типы <code>double</code> и <code>int</code>\
   соответственно, 4 приводится к типу double перед операцией деления.
levels.level1.part7.about6=Следует учитывать, что вычисления с плавающей точкой имеют некоторую погрешность, \
  причём различающуюся на разных компьютерах. \
  Поэтому, если нужно провести денежные вычисления, используют выражения с целым количеством копеек, \
  а не дробным количеством рублей. Например, если нужно вычислить выражение 1 000 рублей/7, \
  это считается как 100 000 копеек/7, чтобы погрешность на разных компьютерах не различалась.
#part8
levels.level1.part8.if=Операторы ветвления. Логический тип
levels.level1.part8.if.about1=Иногда нужно выполнять различные действия в зависимости от полученной информации.\
  Разделение хода выполнения программы на варианты называется ветвлением.\
  В самом простом виде оператор ветвления выглядит так:
levels.level1.part8.if.about2=if (условие) {\n\
  // здесь описываются действия\n\
  }
levels.level1.part8.if.about3=Если условие истинно, действия выполняются. Если же ложно, они игнорируются.
levels.level1.part8.if.about4=Простой пример
levels.level1.part8.if.about5=public static void main(String[] args) {\n\
  check(4);\n\
  check(-1);\n\
  }\n\
  \n\
  public static void check(int n) {\n\
  if (n < 0) {\n\
  System.out.println("Число " + n +\n\
  " отрицательно.");\n\
  }\n\
  }
levels.level1.part8.if.about6=Вывод:
levels.level1.part8.if.about7=Число -1 отрицательно.
levels.level1.part8.if.about8=Пример с двумя вариантами
levels.level1.part8.if.about9=public static void main(String[] args) {\n\
  check(4);\n\
  check(-1);\n\
  }\n\
  \n\
  public static void check(int n) {\n\
  if (n >= 0) { // больше или равно нулю\n\
  System.out.println("Число " + n +\n\
  " неотрицательно.");\n\
  } else {\n\
  System.out.println("Число " + n +\n\
  " отрицательно.");\n\
  }\n\
  }
levels.level1.part8.if.about10=Число 4 неотрицательно.\n\
  Число -1 отрицательно.
levels.level1.part8.if.about11=Пример с тремя вариантами
levels.level1.part8.if.about12=Можно проверять несколько условий с помощью оператора <code>else if</code>.
levels.level1.part8.if.about13=public static void main(String[] args) {\n\
  check(4);\n\
  check(-1);\n\
  check(0);\n\
  }\n\
  \n\
  public static void check(int n) {\n\
  if (n < 0) {\n\
  System.out.println("Число " + n +\n\
  " отрицательно.");\n\
  } else if (n == 0) {\n\
  // сравнение обозначается двойным «равно»,\n\
  // чтобы не путать с присваиванием\n\
  System.out.println("Число " + n +\n\
  " — ноль.");\n\
  } else {\n\
  System.out.println("Число " + n +\n\
  " положительно.");\n\
  }\n\
  }
levels.level1.part8.if.about14=Число 4 положительно.+\n\
  Число -1 отрицательно.+\n\
  Число 0 — ноль.
levels.level1.part8.if.about15=Блоков <code>else if</code> может быть неограниченное количество.
levels.level1.part8.boolean=Логический тип boolean
levels.level1.part8.boolean.about1=Логическое выражение принимает значение <code>true</code> или <code>false</code> \
  (выражение либо истинно, либо ложно). Например, n == 0, как и любое другое сравнение, — логическое выражение.
levels.level1.part8.boolean.about2=boolean nIsZero = n == 0;\n\
  if (nIsZero) {\n\
  //...
levels.level1.part8.boolean.about3=эквивалентно
levels.level1.part8.boolean.about4=if (n == 0) {\n\
  //...
levels.level1.part8.boolean.about5=Разные булевы выражения можно комбинировать с помощью операций «и» и «или».
levels.level1.part8.boolean.about6=Выражение «a или b» истинно, если a или b истинно, \
  и записывается как <code>a || b</code>. Выражение будет ложно, только если и a, и b ложны.
levels.level1.part8.boolean.about7=Выражание «a и b» истинно, только если a истинно и b истинно,\
   и записывается как <code>a && b</code>. Выражение будет ложно, если а или b ложно.
levels.level1.part8.boolean.about8=if (a == 0 || a == 3) {\n\
  // код будет выполнен, если a равно нулю или трём\n\
  }\n\
  if (a == 0 && b == 3) {\n\
  // код будет выполнен, если a равно нулю и b равно трём\n\
  }
levels.level1.part8.boolean.about9=Для булевых выражений действует принцип ускоренного вычисления. Например, в коде
levels.level1.part8.boolean.about10=int a = 0;\n\
  if (a == 0 || a == 3) {\n\
  …
levels.level1.part8.boolean.about11=выражение <code>a == 0</code> истинно,\
  а значение выражения <code>a == 3</code> не будет вычислено за ненадобностью, т. к. уже известно, что всё выражение истинно.
levels.level1.part8.boolean.about12=Аналогично, в коде
levels.level1.part8.boolean.about13=int a = 8;\n\
  if (a == 0 && b == 3) {\n\
  …
levels.level1.part8.boolean.about14=выражение <code>a == 0</code> ложно, \
  поэтому значение выражения <code>b == 3</code> вычислено не будет.
#part9
levels.level1.part9.return=Выход из метода и возврат значения
levels.level1.part9.return.about1=Чтобы прекратить выполнение метода, \
  используют оператор return. Например, проверяем, является ли число положительным и чётным. \
  Если число оказывается меньше или равно 0, метод прерывается и выводится соответствующий комментарий.\
  Если число положительное, проверяем, чётное ли оно.
levels.level1.part9.return.about2=public static void main(String[] args) {\n\
  checkIfPositiveEven(9);\n\
  }\n\
  \n\
  public static void checkIfPositiveEven(int n) {\n\
  if (n <= 0) {\n\
  System.out.println(n +\n\
  " is not positive.");\n\
  return;\n\
  }\n\
  if (n%2 != 0) {\n\
  System.out.println(n +\n\
  " is not even.");\n\
  return;\n\
  }\n\
  System.out.println(n +\n\
  " is positive even.");\n\
  }
levels.level1.part9.return.about3=9 is not even.
levels.level1.part9.return.about4=Метод может возвращать результат своих вычислений. \
  Тип возвращаемого значения указывается при объявлении метода. \
  Ключевое слово <code>void</code> обозначает, что метод не возвращает значение. \
  Если тип возвращаемого значения метода — не <code>void</code>, то метод обязан вернуть значение. \
  Для этого также используется оператор <code>return</code>.
levels.level1.part9.return.about5=9 is not even.
levels.level1.part9.return.about6=public static void main(String[] args) {\n\
  System.out.println(\n\
  "Is number 92 greater than ten " +\n\
  "by absolute value? " +\n\
  isGreaterThanTenAbs(92));\n\
  }\n\
  \n\
  public static boolean isGreaterThanTenAbs(int n) {\n\
  if (n > 10) {\n\
  return true;\n\
  }\n\
  if (n < -10) {\n\
  return true;\n\
  }\n\
  return false;\n\
  }
levels.level1.part9.return.about7=Вызов не-void'ового метода — это выражение. \
  Например, выражение <code>isGreaterThanTenAbs(1)</code> имеет тип boolean, \
  т. к. метод isGreaterThanTenAbs возвращает значения этого типа.
#part10
levels.level1.part10.switch=Множественный выбор
levels.level1.part10.switch.about1=В некоторых ситуациях вариантов развития событий может быть довольно много,\
  и слишком многословно было бы перечислять их с помощью if — else if — else if — … — else. \
  В таком случае используют оператор множественного выбора switch-case.
levels.level1.part10.switch.about2=Синтаксис:
levels.level1.part10.switch.about3=switch (выражение) {\n\
  case значение1:\n\
  // действия, выполняемые, если выражение равно значению 1\n\
  break;\n\
  case значение2:\n\
  // действия, выполняемые, если выражение равно значению 2\n\
  break;\n\
  default:\n\
  // действия, выполняемые, если выражение\n\
  // не равно ни одному из представленных значений\n\
  }
levels.level1.part10.switch.about4=public static void main(String[] args) {\n\
  say(1);\n\
  say(4);\n\
  say(9);\n\
  }\n\
  public static void say(int n) {\n\
  switch (n) {\n\
  case 0:\n\
  System.out.println('й');\n\
  break;\n\
  \n\
  case 1:\n\
  System.out.println('ц');\n\
  break;\n\
  \n\
  case 2:\n\
  System.out.println('у');\n\
  break;\n\
  \n\
  case 3:\n\
  System.out.println('к');\n\
  break;\n\
  \n\
  case 4:\n\
  System.out.println('е');\n\
  break;\n\
  default:\n\
  System.out.println('ы');\n\
  }
levels.level1.part10.switch.about5=ц\n\
  е\n\
  ы
levels.level1.part10.switch.about6=Вы, наверное, обратили внимание, \
  что буквы записаны в одинарных кавычках. \
  Один знак (буква, цифра, знак препинпния и т. п.), записанный в одинарных \
  кавычках, — это выражение типа <code>char</code>. Например, в коде <code>char firstLetter = 'a';</code> \
  переменная <code>firstLetter</code> хранит букву <b>a</b>.
levels.level1.part10.switch.about7=Оператор break внутри <code>switch-case<code> используется для выхода \
  из множественного выбора. \
  Код в <code>switch</code> выполняется от подходящей метки <code>case</code> до ближайшего <code>break</code> \
  либо до конца <code>switch</code> (закрывающей фигурной скобки).
levels.level1.part10.switch.about8=switch (n) {\n\
  case 0:\n\
  System.out.println("Zero");\n\
  break;\n\
  \n\
  case 1:\n\
  System.out.println("One");\n\
  break;\n\
  case 2:\n\
  case 3:\n\
  case 4:\n\
  System.out.println("2…4");\n\
  break;\n\
  \n\
  default:\n\
  System.out.println("5+"); // ну, или отрицательно\n\
  }
levels.level1.part10.for=Цикл for
levels.level1.part10.for.about1=for (начальная установка; условие; действия после итерации) {\n\
  // здесь указываются повторяемые действия\n\
  }
levels.level1.part10.for.about2=Начальная установка — действие, которое выполняется однократно, перед запуском цикла.
levels.level1.part10.for.about3=Условие — булево выражение, истинность которого проверяется перед каждой итерацией.
levels.level1.part10.for.about4=Действие после итерации. Обычно здесь инкрементируется (увеличивается на один) \
  значение переменной-счётчика.
levels.level1.part10.for.about5=Например, код
levels.level1.part10.for.about6=for (int i = 0; i < 5; i++) {\n\
  System.out.println(i);\n\
  }
levels.level1.part10.for.about7=выведет на экран:
levels.level1.part10.for.about8=0\n\
  1\n\
  2\n\
  3\n\
  4
levels.level1.part10.for.about9=Аналогичный цикл с другими параметрами
levels.level1.part10.for.about10=for (int i = 7; i < 14; i += 2) {\n\
  System.out.println(i);\n\
  }
levels.level1.part10.for.about11=7\n\
  9\n\
  11\n\
  13
levels.level1.part10.while=Цикл while
levels.level1.part10.while.about1=while (условие) {\n\
  // действия\n\
  }
levels.level1.part10.while.about2=Такой цикл выполняется, пока истинно условие.
levels.level1.part10.while.about3=Возьмём такой цикл for:
levels.level1.part10.while.about4=for (int i = 0; i < 5; i++) {\n\
  System.out.println(i);\n\
  }
levels.level1.part10.while.about5=и перепишем его, чтобы использовать while:
levels.level1.part10.while.about6=int i = 0;\n\
  while (i < 5) {\n\
  System.out.println(i);\n\
  i++;\n\
  }
levels.level1.part10.while.about7=Цикл while зачастую используется, когда количество итераций не определено заранее. \
  Например, можно скачивать файл из интернета кусочками по 1 КиБ и \
  записывать на жёсткий диск — это действие нужно повторять, пока «кусочки» не закончатся.