#part1
levels.level1.part1=Basic literals
levels.level1.part1.literals=Literals
levels.level1.part1.literals.about1=Regardless of its complexity, a program always performs operations on numbers,\
  strings, and other values. These values are called literals. There are many different sorts of literals in Java, \
  but in this topic we will focus only on a few of them: the ones that surround us all the time in everyday life.
levels.level1.part1.literals.about2=Let's consider integer numbers, strings, and characters \
  in the format in which they are written in Java.
levels.level1.part1.integer=Integer numbers
levels.level1.part1.integer.about1=These numbers are used to count things in the real world. Also, \
  we will often use them in Java.
levels.level1.part1.integer.about2=Here are several examples of valid integer number literals separated by commas: \
  <code>0, 1, 2, 10, 11, 100.</code>
levels.level1.part1.integer.about3=If an integer value contains a lot of digits, we can add underscores to \
  divide the digit into blocks for increased readability: <code>1_000_000</code>. It's more readable than the same value \
  written as <code>1000000</code>.
levels.level1.part1.сharacters=Characters
levels.level1.part1.сharacters.about1=A single character can represent a digit, a letter or another symbol. \
  To write a character we use single quotes as follows: <code>'A', 'B', 'C', 'x', 'y', 'z', '0', '1', '2', '9'</code>. \
  Character literals can represent symbols of an alphabet, digits from <code>'0'</code> to <code>'9'</code>, \
  whitespaces (' '), or other characters or symbols (<code>'$'</code>).
levels.level1.part1.сharacters.about2=Do not confuse characters that represent numbers (e.g. <code>'9'</code>), \
  with numbers themselves (e.g. <code>9</code>).
levels.level1.part1.сharacters.about3=A character can't include two and more digits or \
  letters because it represents only a single symbol. \
  The following two examples are incorrect: <code>'abc', '543'</code>. These literals contain too many characters.
levels.level1.part1.strings=Strings
levels.level1.part1.strings.about1=A string is a sequence of any individual characters. \
  Strings represent text information such as a text of advertising, an address of a web page or a login on a site.
levels.level1.part1.strings.about2=To write a string we use double quotes instead of single ones. \
  Here are some valid examples: <code>"text", "I want to know Java", "123456", "mail@gmail.com"</code>. \
  A string consisting of a single character like "A" is also a valid string,\
  but do not confuse it with the <code>'A'</code> character.
levels.level1.part1.strings.about3=As you can see, strings can include letters, digits, \
  whitespaces, and other characters.
levels.level1.part1.remember=Remember
levels.level1.part1.remember.about1=Do not confuse these literals:
levels.level1.part1.remember.about2=<code>123</code> is an integer number, <code>"123"</code> is a string
levels.level1.part1.remember.about3=<code>'A'</code> is a character, <code>"A"</code> is a string
levels.level1.part1.remember.about4=<code>'1'</code> is a character, <code>1</code> is an integer number
levels.level1.part1.task=Enter the number «23», the character «$» and the string - «I love Java» n the format, \
  in which they are written in Java.
levels.level1.part1.task.error1=You have not entered the number «23».
levels.level1.part1.task.error2=You have not entered the character «$».
levels.level1.part1.task.error3=You have not entered the string «I love Java».
#part2
levels.level1.part2=Printing data
levels.level1.part2.output=<b>The output:</b>
levels.level1.part2.printShort=println() and print()
levels.level1.part2.print=Displaying text using println() and print()
levels.level1.part2.print.about1=<b>Standard output</b> is a receiver to which a program can send information (text). \
  It is supported by all common operating systems. \
  Java provides a special object <code>System.out</code> to work with the standard output. \
  We will often use it to print something.
levels.level1.part2.print.about2=The <code>println</code>  method displays the passed string followed \
  by a new line on the screen. As an example, the following code fragment prints two lines.
levels.level1.part2.print.about3=System.out.println("Hello");\n\
  System.out.println("World");
levels.level1.part2.print.about4=Hello \n\
  World
levels.level1.part2.print.about5=The method allows you to print the empty line when no string is given:
levels.level1.part2.print.about6=System.out.println("Java is a popular programming language.");\n\
System.out.println(); // prints empty line\n\
System.out.println("It is used all over the world!");
levels.level1.part2.print.about7=The <code>print</code> method displays the passed value and places the cursor \
  (the position where we display a value) after it. As an example, the code below outputs all strings in a single line.
levels.level1.part2.print.about8=System.out.print("I ");/n \
System.out.print("know ");\n\
System.out.print("Java ");\n\
System.out.print("well.");
levels.level1.part2.print.about9=I know Java well.
levels.level1.part2.printNumbers=Printing numbers and characters
levels.level1.part2.printNumbers.about1=Both methods <code>println</code> and <code>print</code> allow a program \
  to print not only strings and characters, but also numbers.
levels.level1.part2.printNumbers.about2=System.out.print(108);   // printing a number\n\
  System.out.print('c');   // printing a character that represents a letter\n\
  System.out.print("Q");   // printing a string\n\
  System.out.println('3'); // printing a character that represents a digit\n\
  \n\
  System.out.print(22);\n\
  System.out.print('E');\n\
  System.out.print(8);\n\
  System.out.println('1');
levels.level1.part2.printNumbers.about3=108cQ3\n\
  22E81
levels.level1.part2.task=Using the 3 times method  <b>println</b> display:<br/>\
  I know 2 methods for text output:<br/>\
  println<br/>\
  print
levels.level1.part2.task.error1=Not displayed «I know 2 methods for text output:».
levels.level1.part2.task.error2=Not displayed «println».
levels.level1.part2.task.error3=Not displayed «print».
#part3
levels.level1.part3=public static void main
levels.level1.part3.about=In this lesson, we will build our very first Java program. \
  Our program will simply print "Hello, World!" on the screen \
  (a tradition by most programmers when learning new languages). \
  Our code may not seem too exciting at first, \
  however we will learn about the basic template that all Java programs need to follow.
levels.level1.part3.helloWorldShort=First words
levels.level1.part3.helloWorld=Program first words
levels.level1.part3.helloWorld.about1=There is Java code of this program:
levels.level1.part3.helloWorld.about2=public class Main {\n\
    public static void main(String[] args) {\n\
        System.out.println("Hello, World!");\n\
    }\n\
  }
levels.level1.part3.helloWorld.about3=Hello, World!
levels.level1.part3.terminologyShort=Terminology
levels.level1.part3.terminology=The basic terminology
levels.level1.part3.terminology.about1=Now that you have seen the result, \
  let's learn some basic terminology and then try to understand this program.
levels.level1.part3.terminology.about2=<b>Program</b> – a sequence of instructions (called statements), \
  which are executed one after another in a predictable manner. \
  Sequential flow is the most common and straightforward sequence of statements, \
  in which statements are executed in the order that they are written – from top to bottom in a sequential manner;
levels.level1.part3.terminology.about3=<b>Statement</b> – a single action (like print a text)\
   terminated by semi-colon (<code>;</code>);
levels.level1.part3.terminology.about4=<b>Block</b> – a group of zero, one or more statements enclosed \
  by a pair of braces <code>{...}</code>; There are two such blocks in the program above.
levels.level1.part3.terminology.about5=<b>Method</b> – a sequence of statements \
  that represents a high-level operation (also known as subprogram or procedure).
levels.level1.part3.terminology.about6=<b>Syntax</b> – a set of rules that define how a \
  program needs to be written in order to be valid; Java has its own specific syntax that we will learn;
levels.level1.part3.terminology.about7=<b>Keyword</b> – a word that has a special meaning in the programming language \
  (<code>public</code>, <code>class</code>, and many others). \
  These words cannot be used as variable names for your own program;
levels.level1.part3.terminology.about8=<b>Identifier or name</b> – a word that refers to something \
  in a program (such as a variable or a function name);
levels.level1.part3.terminology.about9=<b>Comment</b> – a textual explanation of what the code does. \
  Java comments start with <code>//</code>.
levels.level1.part3.underMicroscopeShort=Under a microscope
levels.level1.part3.underMicroscope=The Hello World program under a microscope
levels.level1.part3.underMicroscope.about1=The Hello World program illustrates the basic elements of Java programs. \
  For now we will discuss only the most important elements.
levels.level1.part3.underMicroscope.about2=1. <b>The public class</b>. It is the basic unit of a program. \
  Every Java program must have at least one class. \
  The definition of a class consists of the <code>class</code> keyword followed by the class name. \
  A class can have any name, such as <code>App</code>, <code>Main</code>, or <code>Program</code>, \
  but it must not start with a digit. A set of braces <code>{...}</code> encloses the body of a class.
levels.level1.part3.underMicroscope.about3=public class Main {\n\
    // ...\n\
  }
levels.level1.part3.underMicroscope.about4=The text after <code>//</code> is just a comment, \
  not a part of the program. We will learn about comments in detail in later topics.
levels.level1.part3.underMicroscope.about5=2. <b>The main method</b>. To make the program runnable, \
  we put a method named main inside a class. It is the entry point for a Java program. \
  Again, the braces <b>{...}</b> enclose the body of the method, which contains programming statements.
levels.level1.part3.underMicroscope.about6=public static void main(String[] args) {\n\
    // statements go here\n\
  }
levels.level1.part3.underMicroscope.about7=The keywords <code>public</code>, <code>static</code>, and <code>void</code> \
  will be discussed later, so just remember them for now. \
  The name of this method (<code>main</code>) is predefined and should always be the same. \
  Capitalization matters; if you name your first method like <b>Main</b>, <b>MAIN</b> \
  or something else, the program cannot start.
levels.level1.part3.underMicroscope.about8=The element <code>String[]</code> args represents a sequence of \
  arguments passed to the program from the outside world. Don't worry about them right now.
levels.level1.part3.underMicroscope.about9=3. <b>Printing "Hello, world!"</b>. \
  The body of the method consists of programming statements that determine what the program should do after starting. \
  Our program prints the string <b>"Hello, World!"</b> using the following statement:
levels.level1.part3.underMicroscope.about10=System.out.println("Hello, World!"); //  each statement has to end with ;
levels.level1.part3.underMicroscope.about11=This is one of the most important things to understand from \
  the <b>Hello World</b> program. We invoke a special method println to display a string \
  followed by a new line on the screen. We will often use this approach to print something of interest to the screen. \
  The text is printed without double quotes.
levels.level1.part3.underMicroscope.about12=Important, that "Hello, World!" is not a keyword or an identifier; \
  it is just a text to be printed.
levels.level1.part3.keywords=Keywords
levels.level1.part3.keywords.about1=As you can see, even a simple Java program consists of many elements,\
  including keywords that are parts of the language. Totally, \
  Java provides more than 50 keywords which you will gradually learn through this course.
levels.level1.part3.keywords.about2=Note, <code>main</code> is not a keyword.
levels.level1.part3.conclusion=Conclusion
levels.level1.part3.conclusion.about1=We have discussed the simplest program you can write in Java. \
  It has a single class with a single <code>main</code> method. \
  Every Java program must have a <code>main</code> method as it is the first to be executed when the program runs. \
  Don't worry about memorizing every single term used in the lesson (syntax, statement, block). \
  These terms will reappear in future lessons. \
  Do not forget to use the provided <b>Hello World</b> program as a template for your own programs.
levels.level1.part3.task=Используя 3 раза метод <b>println</b> вывести на экран:<br/>\
  I know 2 methods for text output:<br/>\
  println<br/>\
  print
levels.level1.part3.task.error1=На экран не выводится «I know 2 methods for text output:».
levels.level1.part3.task.error2=На экран не выводится «println».
levels.level1.part3.task.error3=На экран не выводится «print».
#part4
levels.level1.part4=Types and variables
levels.level1.part4.declaring=Declaring and initializing
levels.level1.part4.declaring.about1=A <b>variable</b> is a placeholder for storing a value of a particular <b>type</b>:\
   a string, a number, or something else. Every variable has a <b>name</b> \
  (also known as an <b>identifier</b>) to distinguish it from others. \
  Before you start using a variable, you must declare it.
levels.level1.part4.declaring.about2=The general form of declaration is the following:
levels.level1.part4.declaring.about3=DataType variableName = initialization;
levels.level1.part4.declaring.about4=The left part of this statement describes the variable, \
  and the right part describes something that is assigned to it.
levels.level1.part4.declaring.about5=The <b>type</b> (or <b>data type</b>) \
  of a variable determines what possible operations can be performed on the variable \
  and which values can be stored in it. Here we use a non-existing data type (<b>DataType</b>) \
  to demonstrate the general form of declaration.
levels.level1.part4.declaring.about6=The <b>name</b> (or <b>identifier</b>) distinguishes the variable from others. \
  The name of a variable cannot start with a digit; it usually starts with a letter. \
  Always try to choose meaningful and readable names for variables to make your code easy to understand.
levels.level1.part4.declaring.about7=The <b>assignment operator<b> denoted as <code>=</code> \
  is used to assign a single value or a result of an expression to a variable.
levels.level1.part4.declaring.about8=The <b>initialization</b> is a value or a result of an expression \
  that is assigned to the variable.
levels.level1.part4.declaring.about9=According to this declaration, we can declare a variable of the \
  type <code>String</code> and assign the word <b>"java"</b> to it:
levels.level1.part4.declaring.about10=String language = "java";
levels.level1.part4.declaring.about11=We can also declare a variable of the type <code>int</code> \
  to store an integer number:
levels.level1.part4.declaring.about12=int numberOfApples = 5;
levels.level1.part4.declaring.about13=The case in the name of a variable makes a difference: <code>language</code> \
  is not the same as <code>Language</code>.
levels.level1.part4.declaring.about14=Variables can store not only strings and numbers, \
  but also characters and other data types which we will learn about later in this level.
levels.level1.part4.value=Accessing the value of a variable
levels.level1.part4.value.about1=Once a variable has been declared, \
  its value can be accessed and modified using the name. In the example below, we declare a variable and then print it:
levels.level1.part4.value.about2=String dayOfWeek = "Monday";\n\
  System.out.println(dayOfWeek); // Monday
levels.level1.part4.value.about3=It is also possible to assign a value of one variable to another one:
levels.level1.part4.value.about4=int one = 1;\n\
  int num = one;\n\
  System.out.println(num); // 1
levels.level1.part4.value.about5=One important feature of variables is that they can be changed. You don't need to \
  declare a variable again to change its value; just assign a new value to it using the <code>=</code> operator.
levels.level1.part4.value.about6=Let's declare a variable named <code>dayOfWeek</code> \
  and print its value before and after changing:
levels.level1.part4.value.about7=String dayOfWeek = "Monday";\n\
  System.out.println(dayOfWeek); // Monday\n\
  \n\
  dayOfWeek = "Tuesday";\n\
  System.out.println(dayOfWeek); // Tuesday
levels.level1.part4.value.about8=There is one restriction for variables: you can only assign \
  a value of the same type as the type of the initial variable. So, the following code is not correct:
levels.level1.part4.value.about9=int number = 10;\n\
  number = 11; // ok\n\
  number = "twelve"; // it does not work!
levels.level1.part4.alternative=Alternative forms of declaration
levels.level1.part4.alternative.about1=There are several alternative forms of declaration which are \
  less commonly used in practice. Here are several of them in particular examples.
levels.level1.part4.alternative.about2=Declaring several variables of the same type as a single statement:
levels.level1.part4.alternative.about3=String language = "java", version = "8 or newer";
levels.level1.part4.alternative.about4=Separating declaration and initialization into statements:
levels.level1.part4.alternative.about5=int age;\n\
  age = 35;
levels.level1.part4.alternative.about6=However, as we have already noted, these forms are rarely used.
levels.level1.part4.inference=Type inference
levels.level1.part4.inference.about1=Since Java 11, you can \
  write <code>var</code> instead of a specific type to force automatic type inference based on the type of assigned value:
levels.level1.part4.inference.about2=var variableName = initialization;
levels.level1.part4.inference.about3=Here are two examples below:
levels.level1.part4.inference.about4=var language = "Java"; // String\n\
  var version = 11; // int
levels.level1.part4.inference.about5=We will not use type inference in our theory so that our course \
  is suitable for people who use earlier versions of Java. But if you would like to practice it, \
  you may use type inference in our exercises as they fully support Java 11.
#part5
levels.level1.part5=Comments
levels.level1.part5.about1=Inside a Java program, you can write a special text \
  that will be ignored by the java compiler — known as the <b>comment</b>. \
  Comments allow you to exclude code from the compilation process (disable it) \
  or clarify a piece of code to yourself or other developers. \
  In our materials, we use comments in the theory and practice lessons to explain how and why our code works.
levels.level1.part5.about2=The Java programming language supports three kinds of comments.
levels.level1.part5.endOfLine=End-of-line comments
levels.level1.part5.endOfLine.about1=The java compiler ignores any text from <code>//</code> to the end of the line.
levels.level1.part5.endOfLine.about2=class Program {\n\
    public static void main(String[] args) {\n\
        // The line below will be ignored\n\
        // System.out.println("Hello, World");\n\
        // It prints the string "Hello, Java"\n\
        System.out.println("Hello, Java"); // Here can be any comment\n\
    }\n\
  }
levels.level1.part5.endOfLine.about3=In the example above the text after <code>//</code> is ignored by the compiler.
levels.level1.part5.multiLine=Multi-line comments
levels.level1.part5.multiLine.about1=The compiler ignores any text from \
  <code>/*</code> and the nearest <code>*/</code>. It can be used as multiple and single-line comments.
levels.level1.part5.multiLine.about2=class Program {\n\
    public static void main(String[] args) {\n\
        /* This is a single-line comment */\n\
        /*  This is an example of \n\
        a multi-line comment */\n\
    }\n\
  }
levels.level1.part5.multiLine.about3=You can use comments inside other comments:
levels.level1.part5.multiLine.about4=class Program {\n\
    public static void main(String[] args) {\n\
        /*\n\
        System.out.println("Hello"); // print "Hello"\n\
        System.out.println("Java");  // print "Java"\n\
        */\n\
    }\n\
  }
levels.level1.part5.multiLine.about5=The part of the code above is ignored by the compiler because of \
  <code>/* ... */</code> comments.
levels.level1.part5.documentationComments=Java documentation comments
levels.level1.part5.documentationComments.about1=The compiler ignores any text from <code>/**</code> \
  to <code>*/</code> just like it ignores multi-line comments.
levels.level1.part5.documentationComments.about2=These kinds of comments can be used to automatically \
  generate documentation about your source code by using the <b>javadoc</b> tool. \
  Usually, these comments are placed above declarations of classes, interfaces, methods and so on. \
  Some special labels such as <code>@param</code> or <code>@return</code> are often used for controlling the tool. \
  However, they are optional and we will not deal with them for now. Just don't be surprised in case you see one.
levels.level1.part5.documentationComments.about3=See the example below.
levels.level1.part5.documentationComments.about4=class Program {\n\
    /**\n\
    * The main method accepts an array of string arguments\n\
    *\n\
    * @param args from the command line\n\
    */\n\
    public static void main(String[] args) {\n\
        // do nothing\n\
    }\n\
  }
#part6
levels.level1.part6=Arithmetic operators
levels.level1.part6.arithmetic=Arithmetic operators, priority operations
levels.level1.part6.arithmetic.about1=System.out.println(4*7); // multiplication\n\
  System.out.println(28/7); // division\n\
  \n\
  System.out.println(7/4);\n\
  // Since the dividend and divisor are integers, the quotient will also be integer.\n\
  // Its fractional part is discarded.\
  System.out.println(7%4);\n\
  // the output will be the remainder of dividing 7 by 4.
levels.level1.part6.arithmetic.about2=28\n\
  4\n\
  1\n\
  3
levels.level1.part6.arithmetic.about3=As in mathematics, the operations of multiplication,\
  division and calculation of the remainder of division is higher than addition and subtraction operations.\
  You can change the priority of operations using parentheses.
levels.level1.part6.arithmetic.about4=System.out.println(2+2*2);\n\
  // the result of the calculation will be 6\n\
  \n\
  System.out.println((2+2)*2);\n\
  // the result of the calculation will be 8
levels.level1.part6.abbreviated=Abbreviated operators
levels.level1.part6.abbreviated.about1=Mathematical operations can be written in abbreviated form:
levels.level1.part6.abbreviated.about2=Normal recording
levels.level1.part6.abbreviated.about3=z = z + 5;\n\
  z = z - 5;\n\
  z = z * 5;\n\
  z = z / 5;\n\
  z = z % 5;
levels.level1.part6.abbreviated.about4=Abbreviated record
levels.level1.part6.abbreviated.about5=z += 5;\n\
  z -= 5;\n\
  z *= 5;\n\
  z /= 5;\n\
  z %= 5;
levels.level1.part6.abbreviated.about6=Abbreviated record is used when you need to perform an action \
  above the value of the variable and write the result to the same variable. This is a more concise way of recording.
levels.level1.part6.abbreviated.about7=Increment - the operator of increasing the number by one, \
  decrement - decrease by one.
levels.level1.part6.abbreviated.about8=<code>z++</code>, <code>++z</code> — increments, \
  <code>z--</code>, <code>--z</code> — decrements.
levels.level1.part6.abbreviated.about9=int x = 42;\n\
  System.out.println(x);\n\
  System.out.println(x++);\n\
  System.out.println(x++);\n\
  \n\
  x = 42;\n\
  System.out.println(x);\n\
  System.out.println(++x);\n\
  System.out.println(++x);
levels.level1.part6.abbreviated.about10=42\n\
  42\n\
  43\n\
  42\n\
  43\n\
  44
levels.level1.part6.abbreviated.about11=In the first case, after changing the variable, its previous value is returned,\
  before change, so-called post-increment, and in the second case, its new value, \
  after the change, the so-called pre-increment.
levels.level1.part6.abbreviated.about12=Similarly, <code> k-- </code> is the post-decrement, \
  <code> --k </code> is the pre-decrement.
#part7
levels.level1.part7=Floating point numbers. Double type
levels.level1.part7.about1=For operations with fractional numbers, the double type is usually used:
levels.level1.part7.about2=double t = 36.6;\n\
  System.out.println(t + 0.2); // 36.8
levels.level1.part7.about3=When dividing integers, the fractional part is discarded. \
  To prevent this from happening, you need to write the dividend or divisor as <code> double </code>, \
  and not <code> int </code>. This can be done by representing the number as a decimal fraction (for example, 7.0) \
  or with the letter d at the end (for example, 7d):
levels.level1.part7.about4=System.out.println(7/4);\n\
  // integers by default int.\n\
  // Therefore, as a result of division, the fractional part will be discarded and 1\n\
  \n\
  System.out.println(7.0/4);\n\
  // represent 7 as a decimal fraction, the result is 1.75\n\
  \n\
  System.out.println(7d/4);\n\
  // represent 7 as a double, the result is 1.75\n\
  \n\
  System.out.println(7/4d);\n\
  // represent 4 as a double, the result is 1.75
levels.level1.part7.about5=If data of different types comes across in an arithmetic expression, \
  they are reduced to one with a larger range of values, that is, in the expression 7.0 / 4, \
  where the data types are <code> double </code> and <code> int </code> \
  accordingly, 4 is cast to double before the division operation.
levels.level1.part7.about6=Keep in mind that floating point calculations have some error, \
  and different on different computers. \
  Therefore, if you need to conduct monetary calculations, use expressions with an integer number of cents, \
  not a fractional amount of rubles. For example, if you need to calculate the expression of 1,000 rubles / 7,, \
  it is considered as 100 000 kopecks / 7 so that the error on different computers does not differ.
#part8
levels.level1.part8.if=Branch operators Boolean type
levels.level1.part8.if.about1=Sometimes you need to perform various actions depending on the information received.\
  Dividing the progress of a program into options is called branching. \
  In its simplest form, the branch operator looks like this:
levels.level1.part8.if.about2=if (condition) {\n\
  // actions are described here\n\
  }
levels.level1.part8.if.about3=If the condition is true, actions are performed. If false, they are ignored.
levels.level1.part8.if.about4=Simple example
levels.level1.part8.if.about5=public static void main(String[] args) {\n\
  check(4);\n\
  check(-1);\n\
  }\n\
  \n\
  public static void check(int n) {\n\
  if (n < 0) {\n\
  System.out.println("Number " + n +\n\
  " is negative.");\n\
  }\n\
  }
levels.level1.part8.if.about6=Output:
levels.level1.part8.if.about7=The number -1 is negative.
levels.level1.part8.if.about8=Two-choice example
levels.level1.part8.if.about9=public static void main(String[] args) {\n\
  check(4);\n\
  check(-1);\n\
  }\n\
  \n\
  public static void check(int n) {\n\
  if (n >= 0) { // greater than or equal to zero\n\
  System.out.println("Number " + n +\n\
  " is non-negative.");\n\
  } else {\n\
  System.out.println("Number " + n +\n\
  " is negative.");\n\
  }\n\
  }
levels.level1.part8.if.about10=The number 4 is non-negative.\n\
  The number -1 is negative.
levels.level1.part8.if.about11=Three Options Example
levels.level1.part8.if.about12=You can check several conditions using the <code> else if </code> operator.
levels.level1.part8.if.about13=public static void main(String[] args) {\n\
  check(4);\n\
  check(-1);\n\
  check(0);\n\
  }\n\
  \n\
  public static void check(int n) {\n\
  if (n < 0) {\n\
  System.out.println("Number " + n +\n\
  " is negative.");\n\
  } else if (n == 0) {\n\
  // the comparison is indicated by a double “equal”\n\
  // so as not to be confused with assignment\n\
  System.out.println("Number " + n +\n\
  " is zero.");\n\
  } else {\n\
  System.out.println("Number " + n +\n\
  " is non-negative.");\n\
  }\n\
  }
levels.level1.part8.if.about14=The number 4 is non-negative.\n\
  The number -1 is negative.\n\
  The number0 is zero..
levels.level1.part8.if.about15=There can be an unlimited number of <code> else if </code> blocks.
levels.level1.part8.boolean=Boolean
levels.level1.part8.boolean.about1=Boolean expression takes the value <code> true </code> or <code> false </code> \
  (expression is either true or false). For example, n == 0, like any other comparison, is a logical expression.
levels.level1.part8.boolean.about2=boolean nIsZero = n == 0;\n\
  if (nIsZero) {\n\
  //...
levels.level1.part8.boolean.about3=equivalently
levels.level1.part8.boolean.about4=if (n == 0) {\n\
  //...
levels.level1.part8.boolean.about5=Different Boolean expressions can be combined using the “and” and “or” operations.
levels.level1.part8.boolean.about6=The expression "a or b" is true if a or b is true, \
    and is written as <code> a || b </code>. The expression will be false only if both a and b are false.
levels.level1.part8.boolean.about7=The expression "a and b" is true only if a is true and b is true, \
    and is written as <code> a && b </code>. The expression will be false if a or b is false.
levels.level1.part8.boolean.about8=if (a == 0 || a == 3) {\n\
  // code will be executed if a is zero or three\n\
  }\n\
  if (a == 0 && b == 3) {\n\
  // the code will be executed if a is zero and b is three\n\
  }
levels.level1.part8.boolean.about9=For Boolean expressions, the principle of accelerated computation applies. \
  For example, in code
levels.level1.part8.boolean.about10=int a = 0;\n\
  if (a == 0 || a == 3) {\n\
  …
levels.level1.part8.boolean.about11=expression <code> a == 0 </code> is true, \
  and the value of the expression <code> a == 3 </code> will not be calculated as unnecessary, \
  because it is already known that the whole expression is true.
levels.level1.part8.boolean.about12=Similarly, in code
levels.level1.part8.boolean.about13=int a = 8;\n\
  if (a == 0 && b == 3) {\n\
  …
levels.level1.part8.boolean.about14=expression <code> a == 0 </code> is false, \
  therefore, the value of the expression <code> b == 3 </code> will not be calculated.
#part9
levels.level1.part9.return=Exit the method and return a value
levels.level1.part9.return.about1=To stop the method, \
  use the return statement. For example, we check if the number is positive and even. \
  If the number is less than or equal to 0, the method is aborted and the corresponding comment is displayed. \
  If the number is positive, check if it is even.
levels.level1.part9.return.about2=public static void main(String[] args) {\n\
  checkIfPositiveEven(9);\n\
  }\n\
  \n\
  public static void checkIfPositiveEven(int n) {\n\
  if (n <= 0) {\n\
  System.out.println(n +\n\
  " is not positive.");\n\
  return;\n\
  }\n\
  if (n%2 != 0) {\n\
  System.out.println(n +\n\
  " is not even.");\n\
  return;\n\
  }\n\
  System.out.println(n +\n\
  " is positive even.");\n\
  }
levels.level1.part9.return.about3=9 is not even.
levels.level1.part9.return.about4=The method can return the result of its calculations. \
  The type of the return value is specified when the method is declared. \
  The <code> void </code> keyword indicates that the method does not return a value. \
  If the return type of the method is not <code> void </code>, then the method must return the value.  \
  The <code> return </code> operator is also used for this.
levels.level1.part9.return.about5=9 is not even.
levels.level1.part9.return.about6=public static void main(String[] args) {\n\
  System.out.println(\n\
  "Is number 92 greater than ten " +\n\
  "by absolute value? " +\n\
  isGreaterThanTenAbs(92));\n\
  }\n\
  \n\
  public static boolean isGreaterThanTenAbs(int n) {\n\
  if (n > 10) {\n\
  return true;\n\
  }\n\
  if (n < -10) {\n\
  return true;\n\
  }\n\
  return false;\n\
  }
levels.level1.part9.return.about7=A call to a non-void method is an expression. \
  For example, the expression <code> isGreaterThanTenAbs (1) </code> is of type boolean, \
  since the isGreaterThanTenAbs method returns values of this type.
#part10
levels.level1.part10.switch=Multiple choice
levels.level1.part10.switch.about1=In some situations, there can be quite a few scenarios, \
  and it would be too verbose to list them with if - else if - else if - ... - else. \
  In this case, use the switch-case multiple-choice operator.
levels.level1.part10.switch.about2=Syntax:
levels.level1.part10.switch.about3=switch (expression) {\n\
  case value1:\n\
  // actions performed if expression is equal to value 1\n\
  break;\n\
  case value2:\n\
  // actions performed if expression is equal to value 2\n\
  break;\n\
  default:\n\
  // actions performed if the expression\n\
  // is not equal to any of the values represented\n\
  }
levels.level1.part10.switch.about4=public static void main(String[] args) {\n\
  say(1);\n\
  say(4);\n\
  say(9);\n\
  }\n\
  public static void say(int n) {\n\
  switch (n) {\n\
  case 0:\n\
  System.out.println('a');\n\
  break;\n\
  \n\
  case 1:\n\
  System.out.println('b');\n\
  break;\n\
  \n\
  case 2:\n\
  System.out.println('c');\n\
  break;\n\
  \n\
  case 3:\n\
  System.out.println('d');\n\
  break;\n\
  \n\
  case 4:\n\
  System.out.println('e');\n\
  break;\n\
  default:\n\
  System.out.println('f');\n\
  }
levels.level1.part10.switch.about5=b\n\
  e\n\
  f
levels.level1.part10.switch.about6=You probably noticed, that the letters are written in single quotes. \
  One character (letter, number, prepinpnia, etc.) written in single \
  quotation marks are an expression of type <code> char </code>. For example, in code <code> char firstLetter = 'a'; </code> \
  the variable <code> firstLetter </code> stores the letter <b> a </b>.
levels.level1.part10.switch.about7=The break statement inside <code> switch-case <code> is used to exit \
  from multiple choices. \
  The code in the <code> switch </code> runs from the appropriate <code> case </code> label to the nearest <code> break </code> \
  or to the end of the <code> switch </code> (closing curly brace).
levels.level1.part10.switch.about8=switch (n) {\n\
  case 0:\n\
  System.out.println("Zero");\n\
  break;\n\
  \n\
  case 1:\n\
  System.out.println("One");\n\
  break;\n\
  case 2:\n\
  case 3:\n\
  case 4:\n\
  System.out.println("2…4");\n\
  break;\n\
  \n\
  default:\n\
  System.out.println("5+"); // well, or negative\n\
  }
levels.level1.part10.for=For loop
levels.level1.part10.for.about1=for (initial installation; condition; actions after iteration) {\n\
  // repeat actions are indicated here\n\
  }
levels.level1.part10.for.about2=Initial installation - an action that is performed once, before starting the cycle.
levels.level1.part10.for.about3=A condition is a boolean expression, the validity of which is checked before each iteration.
levels.level1.part10.for.about4=Action after iteration. Usually it increments (increases by one) \
  value of the counter variable.
levels.level1.part10.for.about5=For example, the code
levels.level1.part10.for.about6=for (int i = 0; i < 5; i++) {\n\
  System.out.println(i);\n\
  }
levels.level1.part10.for.about7=will display:
levels.level1.part10.for.about8=0\n\
  1\n\
  2\n\
  3\n\
  4
levels.level1.part10.for.about9=A similar loop with other parameters
levels.level1.part10.for.about10=for (int i = 7; i < 14; i += 2) {\n\
  System.out.println(i);\n\
  }
levels.level1.part10.for.about11=7\n\
  9\n\
  11\n\
  13
levels.level1.part10.while=While loop
levels.level1.part10.while.about1=while (condition) {\n\
  // actions\n\
  }
levels.level1.part10.while.about2=Such loop is executed while the condition is true.
levels.level1.part10.while.about3=Take this for loop:
levels.level1.part10.while.about4=for (int i = 0; i < 5; i++) {\n\
  System.out.println(i);\n\
  }
levels.level1.part10.while.about5=and rewrite it to use while:
levels.level1.part10.while.about6=int i = 0;\n\
  while (i < 5) {\n\
  System.out.println(i);\n\
  i++;\n\
  }
levels.level1.part10.while.about7=The while loop is often used when the number of iterations is not predefined. \
  For example, you can download a file from the Internet in pieces of 1 KiB and \
  write to the hard drive - this action must be repeated until the "pieces" are over.